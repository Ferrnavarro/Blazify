@page "/top-tracks"
@using Blazify.Shared.Dtos.Input
@using System.Net.Http;
@using System.Web;
@using Blazify.Shared.Models.Spotify

@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject HttpClient HttpClient

<div class="top-history">
    <ListPage Title="Top Tracks" ImageUrl="/img/top-tracks.jpg">
        <div>
            <TimeRangeSelector OnChange="OnChangeTimeRange"></TimeRangeSelector>

            @if (TopTracks != null && TopTracks.Any())
            {
                @foreach (var track in TopTracks)
                {
                    <TopHistoryTrack Track="@track" />
                }
            }

        </div>
    </ListPage>
</div>

@code {

    public List<Track> TopTracks { get; set; } = new List<Track>();

    protected override async Task OnInitializedAsync()
    {


        var accessToken = await LocalStorage.GetItemAsync<string>("spotify_access_token");

        if(String.IsNullOrEmpty(accessToken))
        {
            NavManager.NavigateTo("/login");
            return;
        }


        await SetTopTracks(SpotifyAPI.Web.PersonalizationTopRequest.TimeRange.LongTerm, accessToken);
    }


    public async Task OnChangeTimeRange(SpotifyAPI.Web.PersonalizationTopRequest.TimeRange timeRange)
    {
        var accessToken = await LocalStorage.GetItemAsync<string>("spotify_access_token");

        if (String.IsNullOrEmpty(accessToken))
        {
            NavManager.NavigateTo("/login");
            return;
        }

        TopTracks = null;
        await SetTopTracks(timeRange, accessToken);
    }


    private async Task SetTopTracks(SpotifyAPI.Web.PersonalizationTopRequest.TimeRange timeRange, string accessToken)
    {


        var requestInfo = new TopRequestDto
        {
            Token = accessToken,
            TimeRange = timeRange
        };

        string url = GetEndpointUrl(requestInfo);

        var response = await HttpClient.GetAsync(url);

        if (!response.IsSuccessStatusCode)
        {
            await LocalStorage.RemoveItemAsync("spotify_access_token");
            NavManager.NavigateTo("/login");
            return;
        }

        TopTracks = await response.Content.ReadFromJsonAsync<List<Track>>();
    }

    private string GetEndpointUrl(TopRequestDto requestInfo)
    {
        var builder = new UriBuilder($"{NavManager.ToAbsoluteUri(NavManager.BaseUri)}usertop/tracks");

        var query = HttpUtility.ParseQueryString(builder.Query);
        query["token"] = requestInfo.Token;
        query["timerange"] = ((int)requestInfo.TimeRange).ToString();
        builder.Query = query.ToString();
        string url = builder.ToString();

        Console.WriteLine(nameof(requestInfo.Token));

        return url;
    }
}
